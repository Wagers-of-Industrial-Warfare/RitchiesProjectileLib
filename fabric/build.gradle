plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

configurations.configureEach {
    resolutionStrategy.eachDependency {
        if (requested.module.name == "fabric-loader") {
            useVersion(fabric_loader_version)
        }
    }
}

repositories {
    maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
    maven { url = "https://cursemaven.com" } // Forge Config API Port
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")
    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${devauth_fabric_version}")

    modApi(include("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:${porting_lib_version}"))
    modApi(include("curse.maven:forge-config-api-port-fabric-547434:${config_api_id}"))
    modApi(include("com.electronwill.night-config:core:${night_config_version}"))
    modApi(include("com.electronwill.night-config:toml:${night_config_version}"))
}

processResources {
    Map<String, String> properties = Map.of(
            "version", version,
            "fabric_loader_version", fabric_loader_version,
            "fabric_api_version", fabric_api_version,
            "minecraft_version", minecraft_version,
            "porting_lib_version", porting_lib_version
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    setArchiveClassifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    setArchiveClassifier null
}

jar {
    setArchiveClassifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
